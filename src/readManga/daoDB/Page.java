package readManga.daoDB;

import readManga.daoDB.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PAGE.
 */
public class Page {

    private Long id;
    private String pageNumber;
    private String imageLink;
    private long chapterId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PageDao myDao;

    private Chapter chapter;
    private Long chapter__resolvedKey;


    public Page() {
    }

    public Page(Long id) {
        this.id = id;
    }

    public Page(Long id, String pageNumber, String imageLink, long chapterId) {
        this.id = id;
        this.pageNumber = pageNumber;
        this.imageLink = imageLink;
        this.chapterId = chapterId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPageNumber() {
        return pageNumber;
    }

    public void setPageNumber(String pageNumber) {
        this.pageNumber = pageNumber;
    }

    public String getImageLink() {
        return imageLink;
    }

    public void setImageLink(String imageLink) {
        this.imageLink = imageLink;
    }

    public long getChapterId() {
        return chapterId;
    }

    public void setChapterId(long chapterId) {
        this.chapterId = chapterId;
    }

    /** To-one relationship, resolved on first access. */
    public Chapter getChapter() {
        if (chapter__resolvedKey == null || !chapter__resolvedKey.equals(chapterId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChapterDao targetDao = daoSession.getChapterDao();
            chapter = targetDao.load(chapterId);
            chapter__resolvedKey = chapterId;
        }
        return chapter;
    }

    public void setChapter(Chapter chapter) {
        if (chapter == null) {
            throw new DaoException("To-one property 'chapterId' has not-null constraint; cannot set to-one to null");
        }
        this.chapter = chapter;
        chapterId = chapter.getId();
        chapter__resolvedKey = chapterId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
